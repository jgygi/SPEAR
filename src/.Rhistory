if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MOFA2")
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
seed = 2021
N = 100; Ntest = 5000;P = 100; D = 5;  num_factors = 5; print_out = 100; num_specific = 2;
max_iter = 1000;  thres_elbo = 0.1; thres_count = 5; pi = .2;
warm_up  = 50; weights = seq(0, 2, length.out = 20); weights = weights[c(length(weights):1)]
data = dataGen_gassian(N = N, Ntest = Ntest, P = P, D = D, seed = seed, num_factors = num_factors,
c = sqrt(1 *log(P*D)/N), pi = pi, eta = 1, num_specific =num_specific, Ymodel = "XY",pi_reg =N/(P*D*log(P * D) * log(P * D)))
X = data$data.tr$X; Y = data$data.tr$Y;
pattern_samples = data$data.tr$pattern_samples
pattern_features = data$data.tr$pattern_features
functional_path = data$data.tr$functional_path;
ws =weights; nclasses = data$data.tr$nclasses
a0 = 1e-2; b0 = 1e-2; a1 = sqrt(nrow(X)); b1 = sqrt(nrow(X));
thres_elbo = 0.01; thres_count = 5; thres_factor = 1e-8;print_out = 10;
a2= sqrt(nrow(X)); b2 = sqrt(nrow(X)); inits_post_mu = NULL;seed = 1; inits_type = "pca";
family = 0
Xobs = apply(X, c(1,2), function(z) ifelse(is.na(z), 0,1))
Yobs = apply(Y, c(1,2), function(z) ifelse(is.na(z), 0,1))
Z = X
tmp = spear(X = X, Xobs = Xobs, Y = Y,  Yobs = Yobs, Z = Z, ws = c(1, 0.5, 0),
family = family,  nclasses = nclasses, functional_path = functional_path,
pattern_samples = pattern_samples, pattern_features = pattern_features,
num_factors = num_factors,  print_out = print_out, warm_up=warm_up,
max_iter = max_iter, seed = seed, thres_elbo = thres_elbo,
thres_count = thres_count)
library(Rcpp)
sourceCpp("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/src/_spear.cpp")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/helpers.R")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/spear.R")
seed = 2021
N = 100; Ntest = 5000;P = 100; D = 5;  num_factors = 5; print_out = 100; num_specific = 2;
max_iter = 1000;  thres_elbo = 0.1; thres_count = 5; pi = .2;
warm_up  = 50; weights = seq(0, 2, length.out = 20); weights = weights[c(length(weights):1)]
data = dataGen_gassian(N = N, Ntest = Ntest, P = P, D = D, seed = seed, num_factors = num_factors,
c = sqrt(1 *log(P*D)/N), pi = pi, eta = 1, num_specific =num_specific, Ymodel = "XY",pi_reg =N/(P*D*log(P * D) * log(P * D)))
X = data$data.tr$X; Y = data$data.tr$Y;
pattern_samples = data$data.tr$pattern_samples
pattern_features = data$data.tr$pattern_features
functional_path = data$data.tr$functional_path;
ws =weights; nclasses = data$data.tr$nclasses
a0 = 1e-2; b0 = 1e-2; a1 = sqrt(nrow(X)); b1 = sqrt(nrow(X));
thres_elbo = 0.01; thres_count = 5; thres_factor = 1e-8;print_out = 10;
a2= sqrt(nrow(X)); b2 = sqrt(nrow(X)); inits_post_mu = NULL;seed = 1; inits_type = "pca";
family = 0
Xobs = apply(X, c(1,2), function(z) ifelse(is.na(z), 0,1))
Yobs = apply(Y, c(1,2), function(z) ifelse(is.na(z), 0,1))
Z = X
tmp = spear(X = X, Xobs = Xobs, Y = Y,  Yobs = Yobs, Z = Z, ws = c(1, 0.5, 0),
family = family,  nclasses = nclasses, functional_path = functional_path,
pattern_samples = pattern_samples, pattern_features = pattern_features,
num_factors = num_factors,  print_out = print_out, warm_up=warm_up,
max_iter = max_iter, seed = seed, thres_elbo = thres_elbo,
thres_count = thres_count)
lowers[idx_w]
Rcpp::sourceCpp('_spear.cpp')
Rcpp::sourceCpp('_spear.cpp')
tmp = spear(X = X, Xobs = Xobs, Y = Y,  Yobs = Yobs, Z = Z, ws = c(1, 0.5, 0),
family = family,  nclasses = nclasses, functional_path = functional_path,
pattern_samples = pattern_samples, pattern_features = pattern_features,
num_factors = num_factors,  print_out = print_out, warm_up=warm_up,
max_iter = max_iter, seed = seed, thres_elbo = thres_elbo,
thres_count = thres_count)
Rcpp::sourceCpp('_spear.cpp')
tmp = spear(X = X, Xobs = Xobs, Y = Y,  Yobs = Yobs, Z = Z, ws = c(1, 0.5, 0),
family = family,  nclasses = nclasses, functional_path = functional_path,
pattern_samples = pattern_samples, pattern_features = pattern_features,
num_factors = num_factors,  print_out = print_out, warm_up=warm_up,
max_iter = max_iter, seed = seed, thres_elbo = thres_elbo,
thres_count = thres_count)
meanFactors = matrix(0, ncol = num_factors, nrow = nrow(Y))
for(k in 1:length(pattern_samples)){
ii = pattern_samples[[k]]
jj = pattern_features[[k]]
post_betas = tmp$post_betas[,,k,3]
meanFactors[ii,] = Z[ii,jj]%*%post_betas[jj,]
}
plot(Y~meanFactors[,1])
seed = 2020
N = 100; Ntest = 5000;P = 100; D = 6;  num_factors = 5; print_out = 100; num_specific = 2;
max_iter = 1000;  thres_elbo = 0.1; thres_count = 5; pi = .2;
warm_up  = 50; weights = seq(0, 2, length.out = 20); weights = weights[c(length(weights):1)]
family = 0
data = dataGen_gaussian(N = N, Ntest = Ntest, P = P, D = D, seed = seed, num_factors = num_factors, c = sqrt(0 *log(P*D)/N), pi = pi, eta = 1, num_specific =num_specific, Ymodel = "X",
pi_reg =N/(P*D*log(P * D) * log(P * D)))
#library(SPEARgaussianV2)
library(Rcpp)
library(glmnet)
require(parallel)
library(reticulate)
use_python("/usr/local/bin/python3", required = TRUE)
library(rcpp)
require(Rcpp)
#sourceCpp("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/sr
predict <- stats::predict
library(SPEARcomplete)
dataGen_gaussian <- function(N = 500, Ntest = 2000, P = 500, D = 4, seed = 123, num_factors = 5, c = 1,
pi = 0.2, eta = 1, num_specific =D-2, Ymodel = "factor",
pi_reg = 0.05){
set.seed(seed)
Theta0 = list(); Gamma0 = list()
X = list(); Xte = list()
for(d in 1:D){
Theta0[[d]] = matrix(rnorm(P*num_factors, sd = 1), ncol = P) * c
Gamma0[[d]] = matrix(rbinom(P*num_factors, size = 1, prob  = pi), ncol = P)
}
for(k in 1:num_factors){
ii = sample(1:D, num_specific)
for(d in 1:D){
if(!(d%in%ii)){
Gamma0[[d]][k,] = 0
Theta0[[d]] = Theta0[[d]] * Gamma0[[d]]
}
}
}
U0 = matrix(rnorm(N*num_factors), nrow = N)
U0te = matrix(rnorm(Ntest*num_factors), nrow = Ntest)
X = list(); Xte = list()
scale_mean.X = c(); scale_sd.X = c()
for(d in 1:D){
X[[d]] = scale(U0 %*% Theta0[[d]]+matrix(rnorm(N*P), ncol = P))
Xte[[d]] = scale(U0te %*% Theta0[[d]]+matrix(rnorm(Ntest*P), ncol = P))
tmp1 = apply(X[[d]], 2, mean);
tmp2 =  apply(X[[d]], 2, sd);
scale_mean.X =c(scale_mean.X, tmp1)
scale_sd.X = c(scale_sd.X, tmp2)
X[[d]] = t(apply(X[[d]], 1, function(z) (z - tmp1)/tmp2))
Xte[[d]] = t(apply(Xte[[d]], 1, function(z) (z - tmp1)/tmp2))
}
if(Ymodel == "factor"){
Y = (U0[,1] + U0[,2])*sqrt(eta/2) + rnorm(N)
Yte = (U0te[,1] + U0te[,2])* sqrt(eta/2)+rnorm(Ntest)
Ytruth = (U0[,1] + U0[,2])*sqrt(eta/2)
Ytruth_te =  (U0te[,1] + U0te[,2])* sqrt(eta/2)
}else{
Xcombine = X[[1]]
Xcombine.te = Xte[[1]]
for(d in 2:D){
Xcombine = cbind(Xcombine, X[[d]])
Xcombine.te = cbind(Xcombine.te, Xte[[d]])
}
beta =rnorm(ncol(Xcombine)) * rbinom(ncol(Xcombine), size = 1, prob = pi_reg)
beta = beta/sqrt(sum(beta^2)) * sqrt(eta)
Ytruth =  Xcombine%*%beta
Ytruth_te =  Xcombine.te%*% beta
Y = Ytruth + rnorm(N)
Yte = Ytruth_te+rnorm(Ntest)
}
scale_mean.y = mean(Y); scale_sd.y = sd(Y);
y = (Y - scale_mean.y)/scale_sd.y; yte = (Yte - scale_mean.y)/scale_sd.y;
ytruth = (Ytruth - scale_mean.y)/scale_sd.y; ytruth.te = (Ytruth_te - scale_mean.y)/scale_sd.y;
data.tr = preparation(Y = y, X = X, family = 0, path.type = "assay")
data.te = preparation(Y = yte, X = Xte, family = 0,path.type = "assay")
data.tr$truth = ytruth
data.tr$xlist = X
data.tr$U = U0
data.te$truth = ytruth.te
data.te$U = U0te
data.te$xlist = Xte
return(list(data.tr = data.tr, data.te = data.te))
}
seed = 2020
N = 100; Ntest = 5000;P = 100; D = 6;  num_factors = 5; print_out = 100; num_specific = 2;
max_iter = 1000;  thres_elbo = 0.1; thres_count = 5; pi = .2;
warm_up  = 50; weights = seq(0, 2, length.out = 20); weights = weights[c(length(weights):1)]
family = 0
data = dataGen_gaussian(N = N, Ntest = Ntest, P = P, D = D, seed = seed, num_factors = num_factors, c = sqrt(0 *log(P*D)/N), pi = pi, eta = 1, num_specific =num_specific, Ymodel = "X",
pi_reg =N/(P*D*log(P * D) * log(P * D)))
foldid = sample(1:5, N, replace = T)
lasso_fit = cv.glmnet(data$data.tr$X, data$data.tr$Y, foldid = foldid)
yhat.lasso.tr = predict(lasso_fit, data$data.tr$X, s = "lambda.min")
yhat.lasso.te  = predict(lasso_fit, data$data.te$X, s = "lambda.min")
set.seed(seed)
Xobs = apply(data$data.tr$X, c(1,2), function(z) ifelse(is.na(z), 0, 1))
Yobs = apply(data$data.tr$Y, c(1,2), function(z) ifelse(is.na(z), 0, 1))
Z = data$data.tr$X # Z does not contain missing values! missing values are imputed if existing in X.
run_time <- system.time(
cv.spear_fit <- cv.spear(X = data$data.tr$X, Y = data$data.tr$Y,
Xobs = Xobs, Yobs = Yobs,
Z  = Z, pattern_samples = data$data.tr$pattern_samples,
pattern_features = data$data.tr$pattern_features,
family = family, nclasses = data$data.tr$nclasses,
ws = weights,foldid = foldid, num_factors =  num_factors,
functional_path = data$data.tr$functional_path,
print_out = print_out,
inits_type = "pca", warm_up=warm_up,
max_iter = max_iter, seed = seed, thres_elbo = thres_elbo,
thres_count = thres_count, crossYonly = T)
)
print(run_time)
cv.eval <- cv.evaluation(fitted.obj = cv.spear_fit, X = data$data.tr$X, Y = data$data.tr$Y,
Z = Z, family = 0, nclasses = data$data.tr$nclasses,
pattern_samples = data$data.tr$pattern_samples,
pattern_features = data$data.tr$pattern_features, nlambda = 100)
err.truth.te = rep(NA, 3)
names(err.truth.te) <- c("lasso", "spear", "mofa")
#dimension: 1-sample, 2-pattern, 3-y, 4-weights
yhat.spear.tr = data$data.tr$X %*% cv.eval$reg_coefs[,1,1,which.min(cv.eval$cvm)]
yhat.spear.te = data$data.te$X %*% cv.eval$reg_coefs[,1,1,which.min(cv.eval$cvm)]
yhat.spear.tr = yhat.spear.tr + cv.eval$intercepts[[1]][which.min(cv.eval$cvm),]
yhat.spear.te = yhat.spear.te + cv.eval$intercepts[[1]][which.min(cv.eval$cvm),]
err.truth.te[1] =  mean((yhat.lasso.te- data$data.te$Y)^2)
err.truth.te[2] =  mean((yhat.spear.te - data$data.te$Y)^2)
print(err.truth.te)
sourceCpp("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/src/_spear.cpp")
require(Rcpp)
sourceCpp("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/src/_spear.cpp")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/spear.R")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/helpers.R")
require(RcppArmadillo)
sourceCpp("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/src/_spear.cpp")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/spear.R")
source("/Users/lg689/Dropbox/COVID19/shared_folder/SPEARcomplete/R/helpers.R")
require(Rcpp)
log(5000)
log(5000)/39
1/29
