plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".")
abline(v = a0, col = 2)
abline(h = 0, col = 2)
dim(pvals_empirical)
pvals_empirical_vector = as.vector(pvals_empirical)
length(pvals_empirical_vector)
qvals = rank(pvals_empirical_vector)/length(pvals_empirical) * 0.05
qvals
min(qvals)
qvals = rank(pvals_empirical_vector)/length(pvals_empirical_vector) * 0.05
min(qvals)
0.05/100
rank(pvals_empirical_vector)
length(pvals_empirical_vector)
1/length(pvals_empirical_vector)
qvals = rank(pvals_empirical_vector)/length(pvals_empirical_vector) * 0.05
qvals
min(qvals)
min( rank(pvals_empirical_vector))
xxidx = rank(pvals_empirical_vector)[thrs<=pvals_empirical_vector]
idx = rank(pvals_empirical_vector)[thrs<=pvals_empirical_vector]
thrs = rank(pvals_empirical_vector)/length(pvals_empirical_vector) * 0.05
idx = rank(pvals_empirical_vector)[thrs<=pvals_empirical_vector]
thrs
idx
max(thrs)
pvals_empirical_vector
max(pvals_empirical_vector)
max(idx)
length(pvals_empirical_vector)
max(thrs )
which(pvals_empirical_vector>tthr)
which(pvals_empirical_vector>thrs)
which(pvals_empirical_vector>0.05)
idx = rank(pvals_empirical_vector)[thrs>=pvals_empirical_vector]
idx
max(idx )
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = which(r<=idx)
idx
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
idx
cols = rep(1, length(pvals_empirical_vector))
effect_sizes
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
cols = rep(1, length(pvals_empirical_vector))
cols[idx&(effect_sizes>0)] = 2
cols[idx&(effect_sizes<0)] = 4
plot(as.vector(effect_sizes)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='change in prob.', pch = ".",col =cols)
plot(log_ratio~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='log.ratio', pch = ".",col =cols)
plot(as.vector(effect_sizes_standardized)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='standardized.effect.size', pch = ".",col =cols)
thr = 0
ll = which(independent_theoreticals>=thr)
a0 = log(log(ss)/ss,base = 10)
reliability = as.vector(log(ss)/ss/independent_theoreticals)
plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".",col =cols)
abline(v = a0, col = 2)
abline(h = 0, col = 2)
independent_theoreticals
dim(independent_theoreticals)
keep_pairs = which(independent_theoreticals >= 1e-4)
keep_pairs
keep(keep_pairs )
length(keep_pairs)
i = 1
print(i)
counts
dim(print(i))
dount
count
counts
dim(counts)
i = 1
print(i)
tmp1 = counts[counts$identity==individuals[i],]
agenes = counts$a_v_gene[counts$identity==individuals[i]]
bgenes = counts$b_v_gene[counts$identity==individuals[i]]
independent_individuals = array(0, dim = dim(independent_theoreticals))
independent_prob_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
observed_prob_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
a
b
ss0 = nrow(tmp1)
ss0
independent_prob_matrix[i,a,b] = TRA_gene_counts[i,a] * TRB_gene_counts[i,b]/ss0^2
tmp1 = counts[counts$identity==individuals[i],]
agenes = counts$a_v_gene[counts$identity==individuals[i]]
bgenes = counts$b_v_gene[counts$identity==individuals[i]]
ss0 = nrow(tmp1)
x1 = ifelse(agenes==a_v_genes[a],1,0)
TRA_gene_counts[i,a] = sum(x1)
TRA_gene_counts =array(NA, dim = c(length(individuals),
length(a_v_genes)))
TRB_gene_counts =array(NA, dim = c(length(individuals),
length(b_v_genes)))
TRA_gene_counts[i,a] = sum(x1)
x2 = ifelse(bgenes==b_v_genes[b],1,0)
TRB_gene_counts[i,b] = sum(x2)
independent_prob_matrix[i,a,b] = TRA_gene_counts[i,a] * TRB_gene_counts[i,b]/ss0^2
independent_prob_matrix[i,a,b]
x1
table(x1)
table(x2)
observed_prob_matrix[i, a, b] = sum(x1*x2)/ss0
effect_matrix[i, a, b] = observed_prob_matrix[i, a, b]-independent_prob_matrix[i,a,b]
log_odd_matrix [i, a, b] = log(observed_prob_matrix[i, a, b]/independent_prob_matrix[i,a,b],base = 10)
log_odd_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
log_odd_matrix [i, a, b] = log(observed_prob_matrix[i, a, b]/independent_prob_matrix[i,a,b],base = 10)
log_odd_matrix [i, a, b]
independent_prob_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
observed_prob_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
effect_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
log_odd_matrix = array(NA, dim = c(length(individuals),
length(a_v_genes),
length(b_v_genes)))
TRA_gene_counts =array(NA, dim = c(length(individuals),
length(a_v_genes)))
TRB_gene_counts =array(NA, dim = c(length(individuals),
length(b_v_genes)))
keep_pairs = which(independent_theoreticals >= 1e-4)
for(i in 1:length(individuals)){
print(i)
tmp1 = counts[counts$identity==individuals[i],]
agenes = counts$a_v_gene[counts$identity==individuals[i]]
bgenes = counts$b_v_gene[counts$identity==individuals[i]]
ss0 = nrow(tmp1)
for(a in 1:length(a_v_genes)){
x1 = ifelse(agenes==a_v_genes[a],1,0)
TRA_gene_counts[i,a] = sum(x1)
for(b in 1:length(b_v_genes)){
x2 = ifelse(bgenes==b_v_genes[b],1,0)
TRB_gene_counts[i,b] = sum(x2)
independent_prob_matrix[i,a,b] = TRA_gene_counts[i,a] * TRB_gene_counts[i,b]/ss0^2
observed_prob_matrix[i, a, b] = sum(x1*x2)/ss0
effect_matrix[i, a, b] = observed_prob_matrix[i, a, b]-independent_prob_matrix[i,a,b]
log_odd_matrix [i, a, b] = log(observed_prob_matrix[i, a, b]/independent_prob_matrix[i,a,b],base = 10)
}
}
}
effect_matrix
effect_matrix[1,]
effect_matrix[1,,]
aggregated_effect_size =  matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
aggregated_log_odd = matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
aggregated_effect_size =  matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
aggregated_log_odd = matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
gene_pairs = matrix(NA,nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3], ncol = 2)
for(i in 1:length(file_all_coef)){
tmp = effect_matrixi[i,,]
aggregated_effect_size[,i] =as.vector(tmp)
tmp = log_odd_matrix[i,,]
aggregated_log_odd[,i] = as.vector(tmp)
}
aggregated_effect_size =  matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
aggregated_log_odd = matrix(NA, ncol = dim(effect_matrix)[1], nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3])
gene_pairs = matrix(NA,nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3], ncol = 2)
for(i in 1:dim(aggregated_effect_size)[2]){
tmp = effect_matrixi[i,,]
aggregated_effect_size[,i] =as.vector(tmp)
tmp = log_odd_matrix[i,,]
aggregated_log_odd[,i] = as.vector(tmp)
}
gene_pairs = matrix(NA,nrow = dim(effect_matrix)[2] * dim(effect_matrix)[3], ncol = 2)
for(i in 1:dim(aggregated_effect_size)[2]){
tmp = effect_matrix[i,,]
aggregated_effect_size[,i] =as.vector(tmp)
tmp = log_odd_matrix[i,,]
aggregated_log_odd[,i] = as.vector(tmp)
}
for(b in 1:dim(effect_matrix)[3]){
ll0 = (b-1) *dim(effect_matrix)[2]
gene_pairs[ll0+c(1:dim(effect_matrix)[2]),1] = a_v_genes
gene_pairs[ll0+c(1:dim(effect_matrix)[2]),2] = b_v_genes[b]
}
aggregated_effect_size
d1 <- dist(t(aggregated_effect_size ), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
orders1
d2 <- dist(aggregated_effect_size, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
orders2
keep_pairs
mat0 = aggregated_effect_size[keep_pairs,]
mat0 = aggregated_effect_size[keep_pairs,]
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
gene_pairs0 = gene_pairs[keep_pairs]
gene_pairs0 = gene_pairs[keep_pairs,]
a_v_genes
dim(mat0)
mat0 = effect_sizes
dim(mat0)
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
orders1
length(orders1)
mat0 = effect_sizes
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = a_v_genes[orders2]
idx_b_v_annot = b_v_genes[orders1]
visualization_signed_pval = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
library(ComplexHeatmap)
library(ComplexHeatmap)
visualization_global_effect = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
left_annotation= HeatmapAnnotation(
which = 'row',
TRA  = idx_a_v_annot
)
top_annotation= HeatmapAnnotation(
which = 'column',
TRB = idx_b_v_annot
)
require(ComplexHeatmap)
col_fun2 <- colorRamp2(c(-5,-1,0,1,5),c('blue',"white",'white','white',"red"))
visualization_global_effect = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
draw(visualization_global_effect)
idx_a_v_annot[1]
idx_b_v_annot[1]
idx_b_v_annot[len(idx_b_v_annot)]
idx_b_v_annot[length(idx_b_v_annot)]
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
cols = rep(1, length(pvals_empirical_vector))
cols[idx&(effect_sizes>0)] = 2
cols[idx&(effect_sizes<0)] = 4
plot(as.vector(effect_sizes)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='change in prob.', pch = ".",col =cols)
plot(log_ratio~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='log.ratio', pch = ".",col =cols)
plot(as.vector(effect_sizes_standardized)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='standardized.effect.size', pch = ".",col =cols)
thr = 0
ll = which(independent_theoreticals>=thr)
a0 = log(log(ss)/ss,base = 10)
reliability = as.vector(log(ss)/ss/independent_theoreticals)
plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".",col =cols)
abline(v = a0, col = 2)
abline(h = 0, col = 2)
#plot(x~z)
#large_effect_size = sum(effect_sizes_standardized0>=0.01)
##fitted p-values with skewed-t distribution
mat0 = effect_sizes
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = a_v_genes[orders2]
idx_b_v_annot = b_v_genes[orders1]
left_annotation= HeatmapAnnotation(
which = 'row',
TRA  = idx_a_v_annot
)
top_annotation= HeatmapAnnotation(
which = 'column',
TRB = idx_b_v_annot
)
require(ComplexHeatmap)
col_fun2 <- colorRamp2(c(-5,-1,0,1,5),c('blue',"white",'white','white',"red"))
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
cols = rep(1, length(pvals_empirical_vector))
cols[idx&(effect_sizes>0)] = 2
cols[idx&(effect_sizes<0)] = 4
plot(as.vector(effect_sizes)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='change in prob.', pch = ".",col =cols)
plot(log_ratio~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='log.ratio', pch = ".",col =cols)
plot(as.vector(effect_sizes_standardized)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='standardized.effect.size', pch = ".",col =cols)
thr = 0
ll = which(independent_theoreticals>=thr)
a0 = log(log(ss)/ss,base = 10)
reliability = as.vector(log(ss)/ss/independent_theoreticals)
plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".",col =cols)
abline(v = a0, col = 2)
abline(h = 0, col = 2)
#plot(x~z)
#large_effect_size = sum(effect_sizes_standardized0>=0.01)
##fitted p-values with skewed-t distribution
mat0 = effect_sizes
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = a_v_genes[orders2]
idx_b_v_annot = b_v_genes[orders1]
left_annotation= HeatmapAnnotation(
which = 'row',
TRA  = idx_a_v_annot
)
top_annotation= HeatmapAnnotation(
which = 'column',
TRB = idx_b_v_annot
)
require(ComplexHeatmap)
visualization_global_effect = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
draw(visualization_global_effect)
par(mfrow = c(2,2))
log_ratio = as.vector(log(effect_sizes_ratio, base = 10))
log_ratio[log_ratio==-Inf] = -1
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
cols = rep(1, length(pvals_empirical_vector))
cols[idx&(effect_sizes>0)] = 2
cols[idx&(effect_sizes<0)] = 4
plot(as.vector(effect_sizes)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='change in prob.', pch = ".",col =cols)
plot(log_ratio~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='log.ratio', pch = ".",col =cols)
plot(as.vector(effect_sizes_standardized)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='standardized.effect.size', pch = ".",col =cols)
thr = 0
ll = which(independent_theoreticals>=thr)
a0 = log(log(ss)/ss,base = 10)
reliability = as.vector(log(ss)/ss/independent_theoreticals)
plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".",col =cols)
abline(v = a0, col = 2)
abline(h = 0, col = 2)
#plot(x~z)
#large_effect_size = sum(effect_sizes_standardized0>=0.01)
##fitted p-values with skewed-t distribution
mat0 = effect_sizes
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = a_v_genes[orders2]
idx_b_v_annot = b_v_genes[orders1]
left_annotation= HeatmapAnnotation(
which = 'row',
TRA  = idx_a_v_annot
)
top_annotation= HeatmapAnnotation(
which = 'column',
TRB = idx_b_v_annot
)
require(ComplexHeatmap)
visualization_global_effect = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
draw(visualization_global_effect)
mat0 = aggregated_effect_size[keep_pairs,]
gene_pairs0 = gene_pairs[keep_pairs,]
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = gene_pairs0[,1]
idx_b_v_annot = gene_pairs0[,2]
global_pval_annotation = -log(as.vector(pvals_empirical),base = 10)[keep_pairs][orders2]
left_annotation= HeatmapAnnotation(
which = 'row',
log_global_pval = global_pval_annotation,
)
global_pval_annotation
left_annotation= HeatmapAnnotation(
which = 'row',
log_global_pval = global_pval_annotation,
na_col = "black"
)
visualization1 = Heatmap(draw_mat_effect, name = "effect size", left_annotation = left_annotation)
draw(visualization1)
dev.off()
mat0 = aggregated_log_odd[keep_pairs,]
draw_mat_log = mat0[,orders1][orders2,]
idx_a_v_annot = gene_pairs0[,1]
idx_b_v_annot = gene_pairs0[,2]
global_pval_annotation = -log(as.vector(pvals_empirical),base = 10)[keep_pairs][orders2]
left_annotation= HeatmapAnnotation(
which = 'row',
log_global_pval = global_pval_annotation,
na_col = "black"
)
visualization2 = Heatmap(draw_mat_log, name = "log_odd", left_annotation = left_annotation)
draw(visualization2)
mat0 = aggregated_log_odd[keep_pairs,]
mat0
mat0[abs(mat0) > 1000] = NA
mat0
mat0 = aggregated_log_odd[keep_pairs,]
mat0[abs(mat0) > 1000] = NA
draw_mat_log = mat0[,orders1][orders2,]
idx_a_v_annot = gene_pairs0[,1]
idx_b_v_annot = gene_pairs0[,2]
global_pval_annotation = -log(as.vector(pvals_empirical),base = 10)[keep_pairs][orders2]
left_annotation= HeatmapAnnotation(
which = 'row',
log_global_pval = global_pval_annotation,
na_col = "black"
)
visualization2 = Heatmap(draw_mat_log, name = "log_odd", left_annotation = left_annotation)
draw(visualization2)
visualization1 = Heatmap(draw_mat_effect, name = "effect size", left_annotation = left_annotation, cluster_rows = F, cluster_columns = F)
draw(visualization1)
visualization2 = Heatmap(draw_mat_log, name = "log_odd", left_annotation = left_annotation, cluster_rows = F, cluster_columns = F)
draw(visualization2)
inner_product_actual = t(aggregated_TRA)%*%aggregated_TRB
# set.seed(123)
# # inner_product_permuted = permutation_global_mean(aggregated_TRA,aggregated_TRB,individual_id,B = 1000000, trace = T, print_out = 100)
# t1 = Sys.time()
# inner_product_permuted = permutation_global_mean(aggregated_TRA=aggregated_TRA, aggregated_TRB = aggregated_TRB, individual_id = individual_id-1, individuals = 1:length(individuals), B = 10000, print_out = 100)
# t2 = Sys.time()
# saveRDS(inner_product_permuted, paste0(path_result, "inner_product_permuted.rds"))
#t2 - t1
inner_product_permuted <- readRDS(paste0(path_result, "inner_product_permuted.rds"))
###empirical pvalues
pvals_empirical = matrix(0, nrow = length(a_v_genes), ncol = length(b_v_genes))
effect_sizes = matrix(0, nrow = length(a_v_genes), ncol = length(b_v_genes))
independent_theoreticals =  matrix(0, nrow = length(a_v_genes), ncol = length(b_v_genes))
AVprob = apply(aggregated_TRA,2,mean)
BVprob = apply(aggregated_TRB,2,mean)
ss = sum(inner_product_actual)
for(a in 1:length(a_v_genes)){
for(b in 1:length(b_v_genes)){
independent_theoreticals[a,b] = AVprob[a]*BVprob[b]
pvals_empirical[a,b] = (sum(abs(inner_product_permuted[a,b,]/ss-independent_theoreticals[a,b])>=abs(inner_product_actual[a,b]/ss-independent_theoreticals[a,b]))+1)/(dim(inner_product_permuted)[3]+1)
}
}
effect_sizes =  inner_product_actual/ss- independent_theoreticals
effect_sizes_standardized0 = effect_sizes/sqrt(independent_theoreticals * (1-independent_theoreticals))
effect_sizes_standardized = effect_sizes_standardized0*sqrt(ss)
effect_sizes_ratio = inner_product_actual/ss/independent_theoreticals
pvals_empirical_vector = as.vector(pvals_empirical)
x = sort(pvals_empirical_vector)
z = c(1:length(pvals_empirical_vector))/length(pvals_empirical_vector)
par(mfrow = c(2,2))
log_ratio = as.vector(log(effect_sizes_ratio, base = 10))
log_ratio[log_ratio==-Inf] = -1
r = rank(pvals_empirical_vector)
thrs = r /length(pvals_empirical_vector) * 0.05
idx = max(r[thrs>=pvals_empirical_vector])
idx = (r<=idx)
cols = rep(1, length(pvals_empirical_vector))
cols[idx&(effect_sizes>0)] = 2
cols[idx&(effect_sizes<0)] = 4
plot(as.vector(effect_sizes)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='change in prob.', pch = ".",col =cols)
plot(log_ratio~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='log.ratio', pch = ".",col =cols)
plot(as.vector(effect_sizes_standardized)~as.vector(log(pvals_empirical, base = 10)), xlab = 'log.pval', ylab ='standardized.effect.size', pch = ".",col =cols)
thr = 0
ll = which(independent_theoreticals>=thr)
a0 = log(log(ss)/ss,base = 10)
reliability = as.vector(log(ss)/ss/independent_theoreticals)
plot(log_ratio~as.vector(log(independent_theoreticals, base = 10)), xlab = 'log.theoretical.prob', ylab ='log.ratio', pch = ".",col =cols)
abline(v = a0, col = 2)
abline(h = 0, col = 2)
#plot(x~z)
#large_effect_size = sum(effect_sizes_standardized0>=0.01)
##fitted p-values with skewed-t distribution
mat0 = effect_sizes
d1 <- dist(t(mat0), method = "euclidean")
hc1 <- hclust(d1, method = "complete" )
orders1 = hc1$order
d2 <- dist(mat0, method = "euclidean")
hc2 <- hclust(d2, method = "complete" )
orders2 = hc2$order
draw_mat_effect = mat0[,orders1][orders2,]
idx_a_v_annot = a_v_genes[orders2]
idx_b_v_annot = b_v_genes[orders1]
left_annotation= HeatmapAnnotation(
which = 'row',
TRA  = idx_a_v_annot
)
top_annotation= HeatmapAnnotation(
which = 'column',
TRB = idx_b_v_annot
)
require(ComplexHeatmap)
visualization_global_effect = Heatmap(draw_mat_effect , left_annotation = left_annotation, top_annotation = top_annotation)
draw(visualization_global_effect)
#save(pvals_empirical)
